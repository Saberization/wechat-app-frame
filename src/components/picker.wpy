<style lang="css">
@import '../assets/frame.wxss';
</style>

<template>
  <picker wx:if="{{type === 'selector'}}" mode="{{type}}" range="{{resultdata}}" value="{{index}}" bindchange="bindPickerChangeOrMultiPickerChange" disabled="{{disabled}}" range-key="{{key}}" bindcancel="bindPickerCancel">
    {{placeholder ? placeholder : showPageText}}
  </picker>

  <picker wx:if="{{type === 'multiSelector'}}" mode="{{type}}" range="{{resultdata}}" value="{{index}}" disabled="{{disabled}}" bindcolumnchange="bindMultiPickerColumnChange" bindchange='bindPickerChangeOrMultiPickerChange' bindcancel="bindPickerCancel" range-key="{{key}}">
    {{placeholder ? placeholder : showPageText}}
  </picker>
</template>

<script>
import wepy from 'wepy';

export default class Picker extends wepy.component {
  props = {
    type: {
      type: String,
      default: 'selector'
    },
    array: {
      type: Array,
      default: [
        {
          value: 'Saber',
          text: 'Saber'
        },
        {
          value: 'Rin',
          text: 'Rin'
        }
      ]
    },
    index: {
      type: Object,
      default: 0,
      twoWay: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    key: {
      type: String,
      default: 'text'
    },
    placeholder: {
      type: String
    },
    success: {
      type: String
    },
    cancel: {
      type: String
    }
  };

  data = {
    // 结果值
    resultdata: [],
    showPageText: ''
  };

  // 核心代码
  computePicker() {
    const resultdata = this.resultdata;

    if (Array.isArray(resultdata) && resultdata.length >= 1) {
      const type = this.type,
        index = this.index,
        key = this.key,
        indexlen = index.length,
        placeholder = this.placeholder;

      let text = '',
        value = '';

      if (type === 'multiSelector') {
        let col1 = resultdata[0][index[0]],
          col2 = resultdata[1][index[1]],
          col3 = resultdata[2] ? resultdata[2][index[2]] : '';

        text = col1.text + ' ' + col2.text;
        value = col1.value + ' ' + col2.value;

        if (typeof col3 === 'object') {
          text += ' ' + col3.text;
          value += ' ' + col3.value;
        }
      } else if (
        type === 'selector' &&
        typeof parseInt(index, 10) === 'number'
      ) {
        const item = resultdata[index];

        value = item.value;
        text = item.text;
      }

      return {
        text: text,
        value: value,
        which: index
      };
    }
  }

  methods = {
    bindPickerChangeOrMultiPickerChange(e) {
      this.index = e.detail.value;
      this.placeholder = '';

      const param = this.computePicker();

      this.showPageText = param.text;

      this.$nextTick(function() {
        // 页面加载后，观测是否有picker的回调函数，并且无placeholder，默认选中第一个
        if (this.success && !this.placeholder) {
          this.$emit(this.success, param);
        }
      });
    },

    bindMultiPickerColumnChange(e) {
      const detail = e.detail,
        array = this.array, // 原始数据
        resultdata = this.resultdata, // 筛选过后的数据
        column = detail.column,
        index = this.index,
        indexlen = index.length,
        value = detail.value; // 滚动的是 column 列中的第几项

      // 只需要考虑两种情况，也就是滑动第一列与滑动第二列，即 column 为 0 或者 为 1
      switch (column) {
        // 当滑动第一列的时候，需要联动修改第二列与第三列的数据
        case 0:
          // 当前数据
          const children = array[value].children;

          if (indexlen === 3) {
            this.index = [value, 0, 0];

            // 需要将原先的置空
            resultdata[1] = [];
            resultdata[2] = [];
          } else if (indexlen === 2) {
            this.index = [value, 0];

            resultdata[1] = [];
          }

          children.forEach((e, i) => {
            resultdata[1].push(e);

            if (i === 0) {
              const _children = e.children;

              if (Array.isArray(_children) && indexlen === 3) {
                _children.forEach(e => {
                  resultdata[2].push(e);
                });
              }
            }
          });

          break;

        // 当滚动的是第二列，第三列数据变更
        case 1:
          if (indexlen === 2) {
            index[1] = value;
          } else if (indexlen === 3) {
            index[1] = value;
            index[2] = 0;
            resultdata[2] = [];

            const col3_data = array[index[0]].children[value].children;

            // 如果有第三列的话
            if (Array.isArray(col3_data)) {
              col3_data.forEach(e => {
                resultdata[2].push(e);
              });
            }
          }
          break;
      }
    },

    // 绑定点击遮罩或者取消按钮事件
    bindPickerCancel() {
      if (this.cancel) {
        this.$emit(this.cancel);
      }
    }
  };

  onLoad() {
    const type = this.type,
      array = this.array,
      index = this.index,
      indexlen = index.length;

    if (type === 'multiSelector') {
      const index = this.index,
        indexlen = index.length;

      let resultdata = this.resultdata;

      resultdata[0] = [];

      if (indexlen === 3) {
        resultdata[1] = [];
        resultdata[2] = [];
      }
      else if (indexlen === 2) {
        resultdata[1] = [];
      }

      array.forEach((e, i) => {
        // 批量添加第一列，第一列是一开始就需要展示出来的
        resultdata[0].push(e);

        if (i === index[0]) {
          const children = e.children;

          if (Array.isArray(children)) {
            children.forEach((_e, _i) => {
              resultdata[1].push(_e);

              const _children = _e.children;

              if (_i === index[1] && indexlen === 3 && Array.isArray(_children)) {
                _children.forEach(__e => {
                  resultdata[2].push(__e);
                });
              }
            });
          }
        }
      });
    } else if (type === 'selector') {
      this.resultdata = array;
    }

    this.showPageText = this.computePicker().text;
    this.$apply();
  }
}
</script>
