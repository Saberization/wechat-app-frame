<style lang="css">
@import '../assets/frame.wxss';
</style>

<template>
  <picker wx:if="{{type === 'selector'}}" mode="{{type}}" range="{{pickerData}}" value="{{index}}" bindchange="bindPickerChange" disabled="{{disabled}}" range-key="{{key}}" bindcancel="bindPickerCancel">
    {{placeholder ? placeholder : pickerData[index][key]}}
  </picker>

  <picker wx:if="{{type === 'multiSelector'}}" mode="{{type}}" range="{{pickerData}}" value="{{index}}" disabled="{{disabled}}" bindcolumnchange="bindMultiPickerColumnChange" bindchange='bindMultiPickerChange' bindcancel="bindPickerCancel" range-key="{{key}}">
    {{placeholder ? placeholder : (pickerData[0][index[0]][key] + ' ' + pickerData[1][index[1]][key] + (pickerData[2][index[2]][key] ? (' ' + pickerData[2][index[2]][key]) : ''))}}
  </picker>
</template>

<script>
import wepy from 'wepy';

export default class Picker extends wepy.component {
  props = {
    type: {
      type: String,
      default: 'selector'
    },
    index: {
      type: Object,
      default: 0,
      twoWay: true
    },
    multiIndex: {
      type: Object,
      default: [0, 0, 0],
      twoWay: true
    },
    disabled: {
      type: Boolean,
      twoWay: true,
      default: true
    },
    key: {
      type: String,
      default: 'text'
    },
    placeholder: {
      type: String
    },
    success: {
      type: String
    },
    cancel: {
      type: String
    }
  };

  data = {
    // 结果值
    pickerData: [],
    multiPickerData: []
  };

  methods = {
    bindPickerChange(e) {
      this.index = e.detail.value;
      this.placeholder = '';

      if (this.success && !this.placeholder) {
        const param = this.pickerData[this.index];

        this.$emit(this.success, param);
      }
    },

    bindMultiPickerChange(e) {
      const index = e.detail.value;
      const pickerData = this.pickerData;
      const index_1 = index[0],
        index_2 = index[1],
        index_3 = index[2];

      this.index = index;
      this.placeholder = '';

      if (this.success && !this.placeholder) {
        let text = '',
          value = '';

        if (pickerData.length === 3) {
          text =
            pickerData[0][index_1].text +
            ' ' +
            pickerData[1][index_2].text +
            ' ' +
            pickerData[2][index_3].text;
          value =
            pickerData[0][index_1].value +
            ' ' +
            pickerData[1][index_2].value +
            ' ' +
            pickerData[2][index_3].value;
        } else {
          text =
            pickerData[0][index_1].text + ' ' + pickerData[1][index_2].text;
          value =
            pickerData[0][index_1].value + ' ' + pickerData[1][index_2].value;
        }

        this.$emit(this.success, {
          text: text,
          value: value
        });
      }
    },

    bindMultiPickerColumnChange(e) {
      const multiPickerData = this.multiPickerData,
        index = this.index,
        value = e.detail.value,
        pickerData = this.pickerData,
        column = e.detail.column;

      switch (column) {
        case 0:
          index[0] = value;
          index[1] = 0;
          index[2] = index[2] ? 0 : index[2];
          pickerData[1] = [];

          if (index[2] || index[2] == 0) {
            pickerData[2] = [];
          }

          const children = multiPickerData[value].children;

          if (Array.isArray(children) && children.length >= 1) {
            children.forEach((e, i) => {
              pickerData[1].push({
                text: e.text,
                value: e.value
              });

              if (
                pickerData[2] &&
                Array.isArray(pickerData[2]) &&
                i === index[2]
              ) {
                const _children = e.children;

                if (Array.isArray(_children) && _children.length >= 1) {
                  _children.forEach(__e => {
                    pickerData[2].push({
                      text: __e.text,
                      value: __e.value
                    });
                  });
                }
              }
            });
          }

          this.$apply();
          break;

        case 1:
          index[1] = value;

          if (index[2] || index[2] == 0) {
            const children =
              multiPickerData[index[0]].children[index[1]].children;

            pickerData[2] = [];
            index[2] = 0;

            if (Array.isArray(children) && children.length >= 1) {
              children.forEach(e => {
                pickerData[2].push({
                  text: e.text,
                  value: e.value
                });
              });
            }
          }

          this.$apply();
          break;

        default:
          break;
      }
    },

    // 绑定点击遮罩或者取消按钮事件
    bindPickerCancel() {
      if (this.cancel) {
        this.$emit(this.cancel);
      }
    },

    handlePickerData(data) {
      this.pickerData = data;
      this.disabled = false;
      this.$apply();
    },

    handleMultiPickerData(data) {
      const index = this.index;
      const indexLen = index.length;
      const pickerData = this.pickerData;
      const index_2 = index[1];
      const index_3 = index[2];

      // 初始值
      this.multiPickerData = data;

      index.forEach((e, i) => {
        pickerData[i] = [];
      });

      data.forEach((e, i) => {
        pickerData[0].push({
          text: e.text,
          value: e.value
        });

        if (i == index_2) {
          const children = e.children;

          if (Array.isArray(children) && children.length >= 1) {
            children.forEach((_e, _i) => {
              pickerData[1].push({
                text: _e.text,
                value: _e.value
              });

              // 如果有3列的话
              if (index_3 == 0 || index_3) {
                const _children = _e.children;

                _children.forEach(__e => {
                  pickerData[2].push({
                    text: __e.text,
                    value: __e.value
                  });
                });
              } else {
                return;
              }
            });
          }
        }
      });

      this.disabled = false;
      this.$apply();
    }
  };
}
</script>
